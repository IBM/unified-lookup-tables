"""Core evaluation objects."""

__copyright__ = """
LICENSED INTERNAL CODE. PROPERTY OF IBM.
IBM Research Licensed Internal Code
(C) Copyright IBM Corp. 2024
ALL RIGHTS RESERVED
"""


from abc import ABC, abstractmethod
from typing import Any, Dict, List

import numpy as np
import numpy.typing as npt
import torch
from datasets import Dataset
from transformers import EvalPrediction


class Evaluator(ABC):
    """Base evaluator class.

    Args:
        ABC: Abstract class.
    """

    def __init__(self, **kwargs: Any) -> None:
        """Initialize evaluator."""
        self.additional_kwargs = kwargs

    @abstractmethod
    def compute(
        self,
        generated_model_test_output: List[str | torch.Tensor | npt.NDArray[np.float32]],
        groundtruth: Dataset,
    ) -> Dict[str, Dict[str, float]]:
        """Computes metrics only.

        Args:
            generated_model_test_output: Predictions as generated by model.
            groundtruth: Groundtruth values of the predictions.

        Returns:
            metrics computed.
        """

    @abstractmethod
    def compute_metrics_training(self, eval_preds: EvalPrediction) -> Dict[str, Dict[str, Any]]:
        """Computes metrics during training.

        Args:
            eval_preds: EvalPrediction generated during evaluation_step

        Returns:
            metrics computed.
        """
